    Segmentation Fault (segfault):
        A segmentation fault occurs when a program tries to access a memory location that it's not allowed to access. This can happen for various reasons, such as:
            Dereferencing a null or invalid pointer.
            Accessing memory outside the bounds of an array.
            Trying to write to read-only memory.

    Bus Error:
        A bus error is similar to a segmentation fault but usually indicates a more specific problem with memory alignment. It occurs when a program attempts to access memory in a way that the hardware does not support, such as:
            Accessing unaligned memory addresses (e.g., reading a 4-byte integer from a non-aligned address).
            Trying to perform operations on memory that's not physically present (like hardware-mapped memory).

    Double Free:
        A double free error happens when a program attempts to free the same block of memory more than once. After a memory block is freed, the program should not try to free it again because the memory is no longer owned by the program. Common causes include:
            Freeing a pointer twice by mistake.
            Using the free() function on an already freed memory block.
        This error can lead to memory corruption and unpredictable program behavior.

These errors are usually symptoms of bugs in the program's memory management, such as incorrect pointer usage, improper handling of dynamically allocated memory, or misuse of library functions. Debugging tools like gdb, valgrind, or sanitizers can help identify and fix these issues.


Definition: Heap memory is where memory is dynamically allocated at runtime using functions like malloc(), calloc(), realloc() (in C), or new (in C++).
Characteristics:

    Dynamic Allocation: Memory can be allocated and deallocated at any time during the program's execution.
    Lifetime: Memory remains allocated until it's explicitly deallocated by the programmer using free() (in C) or delete (in C++). If not freed properly, this can lead to memory leaks.
    Flexible Size: The size of the memory block can be specified during runtime, allowing for more flexible data structures like linked lists, trees, and resizable arrays.

Usage: Heap memory is typically used when the size of data structures is not known at compile time.

    Memory Leaks: Forgetting to free memory after use can lead to memory leaks, where memory is allocated but never released, eventually exhausting system resources.
    Fragmentation: Allocating and deallocating memory repeatedly can cause fragmentation, where free memory is scattered in small blocks, making it difficult to allocate large contiguous memory.
    Double Free: Freeing a memory block that has already been freed, which can lead to undefined behavior and program crashes.
    Dangling Pointers: Pointers that reference memory locations that have already been deallocated.

Proper management of heap memory is crucial to prevent these issues and ensure the stability and efficiency of a program.


libft.a:

    This is a static library file that contains compiled code from your C files (like ft_isalpha.c, ft_isdigit.c, etc.).
    When you create a static library using a Makefile, all the object files (.o files) are bundled into this single archive file.
    This library can be linked to other programs so that they can use the functions it contains without needing to recompile the source code.
    Developers create static libraries like libft.a to make it easier to reuse code across multiple projects.
    
    
    
    libft.h:

    This is a header file that contains the declarations (function prototypes, macros, constants, and data type definitions) for the functions implemented in your library.
    Other source files include this header file using #include "libft.h" to know how to use the functions from the library correctly.
    The header file ensures that the compiler knows what functions are available in the library and how to call them.
    
    
    A static function in C is a function that is only accessible within the file where it is declared.
    
    
    A pointer is a variable that stores the memory address of another variable.
Pointers provide a way to manipulate memory directly, which is powerful for functions, arrays, and dynamic memory allocation.
int *ptr; // Declares a pointer to an integer
#include <stdio.h>

int main() {
    int num = 10;
    int *ptr = &num; // Pointer to the variable num

    printf("Value of num: %d\n", num);           // Prints the value of num
    printf("Address of num: %p\n", (void*)&num); // Prints the address of num
    printf("Pointer ptr value: %p\n", (void*)ptr); // Prints the address stored in ptr
    printf("Value pointed to by ptr: %d\n", *ptr); // Dereferences ptr to get num's value

    return 0;
}
&num gives the address of the variable num.
*ptr is used to dereference the pointer to get the value stored at that address.

#include <stdio.h>

// Function that uses a pointer to modify the variable value
void increment(int *value) {
    *value += 1; // Increment the value at the memory address
}

int main() {
    int num = 5;
    increment(&num); // Pass the address of num to the function
    printf("The incremented value is: %d\n", num); // Should print 6
    return 0;
}
#include <stdio.h>

// Static function to swap values using pointers
static void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int x = 3, y = 5;
    swap(&x, &y); // Call the static function with pointers
    printf("After swap: x = %d, y = %d\n", x, y); // Outputs: x = 5, y = 3
    return 0;
}
Making a pointer parameter const in a function prevents the function from accidentally modifying the data it receives.


size_t is an unsigned integer data type in C (and C++), which is used to represent the size of objects or memory blocks. It is the type returned by the sizeof operator and is widely used in functions that deal with sizes, such as memory allocation and string manipulation.

When you subtract '0' from a character representing a digit, you effectively convert that character to its integer value.
=============================
int **ptr
======================
int x = 10; — A variable x storing the value 10 in memory.
int *p = &x; — A pointer p that stores the address of x.
int **pp = &p; — A double pointer pp that stores the address of the pointer p.

Dynamic Memory Allocation: When allocating memory for a 2D array, you often need to use a double pointer.

#include <stdio.h>
#include <stdlib.h>

int main() {
    int rows = 3, cols = 4;
    int **arr;

    // Allocating memory for rows pointers
    arr = (int **)malloc(rows * sizeof(int *));

    // Allocating memory for each row
    for (int i = 0; i < rows; i++) {
        arr[i] = (int *)malloc(cols * sizeof(int));
    }

    // Assigning values and printing the 2D array
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            arr[i][j] = i + j;
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }

    // Freeing the allocated memory
    for (int i = 0; i < rows; i++) {
        free(arr[i]);
    }
    free(arr);

    return 0;
}



!!!! TODO:
---> LSTCLEAR

==========================================================
void	*ft_memchr(const void *s, int c, size_t n)
{
	unsigned char	*temp;
	size_t			i;

	temp = (unsigned char *)s;
	i = 0;
	while (i < n)
	{
		if (temp[i] == (unsigned char)c)
			return (temp + i);
		i++;
	}
	return (NULL);
}
temp + i: is pointer arithmetic that calculates the address of the byte at index i in the memory block pointed to by temp.

    temp is of type unsigned char *, so temp + i advances i bytes from the original memory address (temp).
    When i = 0, temp + i simply points to the start of the memory block (s).
    When i = 1, temp + i points to the second byte of the block, and so on.

Return Value:

    The expression (temp + i) returns a pointer to the first occurrence of the character c in the memory block.
    This pointer allows the caller to know exactly where in the memory the character was found.
====================================================================
size_t is an unsigned data type defined in the C standard library. It is primarily used to represent the size of objects in bytes and is the return type of the sizeof operator. The size_t type is widely used for various functions that deal with memory sizes or array indexing.


    A file descriptor (fd) is an integer that uniquely identifies an open file (or another I/O resource) in a program.
    File descriptors are used by the operating system to keep track of all files and resources that a program has opened.
    The concept is not limited to files but also applies to sockets, pipes, and standard input/output.

File Descriptors in Unix-like Systems

    When a program starts, the operating system provides it with three default file descriptors:
        Standard Input (stdin): File descriptor 0.
        Standard Output (stdout): File descriptor 1.
        Standard Error (stderr): File descriptor 2.

These are commonly used file descriptors for input and output operations:

    File Descriptor 0 (fd = 0) is used for reading input from the keyboard.
    File Descriptor 1 (fd = 1) is used for writing output to the terminal.
    File Descriptor 2 (fd = 2) is used for writing error messages to the terminal.

In addition to these, whenever a file is opened, the operating system assigns a new file descriptor (a non-negative integer) to keep track of that file.



!!!!
CONTROL+OPTION+H for header
!!!

The calloc() function allocates memory for an array of nmemb elements of size bytes each and returns a pointer to  the  allo‐
       cated  memory.   The  memory  is  set to zero.  If nmemb or size is 0, then calloc() returns either NULL, or a unique pointer
       value that can later be successfully passed to free().  If the multiplication of nmemb and size would result in integer over‐
       flow,  then  calloc() returns an error.

===========================================================
void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*temp;

	if (!del || !lst || !*lst)
		return ;
	while (lst && *lst)
	{
		temp = (*lst)->next;
		ft_lstdelone(*lst, del);
		*lst = temp;
	}
	*lst = NULL;
}
lst: This is a pointer to a pointer (t_list **lst), meaning it holds the address of a pointer that points to the first element of the linked list. lst allows you to modify the original pointer outside the function, which is why it's passed as a double pointer.

*lst: This dereferences lst, giving you the pointer to the actual first element of the list (t_list *). This is the pointer you use to traverse the linked list and manipulate individual elements.
============================================












































