cmd1 | cmd2 | cmd3 means
stdout(cmd1) → stdin(cmd2) and stdout(cmd2) → stdin(cmd3)
Example for 3 commands:
pipe[0] connects cmd1 → cmd2
pipe[1] connects cmd2 → cmd3
So you need N - 1 pipes for N commands.
 fork() → child runs handle_child(...)
In child:
if (i > 0 && pipes[i - 1])  // read from previous pipe
    dup2(pipes[i - 1][0], STDIN_FILENO);
if (i < pipe_count && pipes[i])  // write to current pipe
    dup2(pipes[i][1], STDOUT_FILENO);
dup2(...) replaces stdin or stdout of the process with the pipe end

After redirection, the child closes the original pipe ends
Child only keeps:
stdin: from previous pipe’s read end
stdout: to current pipe’s write end
Everything else gets closed


=============================================================================
In a pipeline, every command runs in a subshell — including built-ins.
Built-ins are still built-in,
But when used in a pipe, they are run in a child shell (a subprocess),
So any side effect (like cd, export, unset) is lost after execution.

 in Bash, when a built-in is part of a pipeline, it always runs in a child process
=====================================================

cd /tmp | echo hi | pwd
cd /tmp: runs in a subshell, changes dir only there
pwd: still shows the original directory

exit | echo hello
exit: exits the child only
echo: still runs, shell stays open

export TEST=hi | env | grep TEST
TEST is not visible — set only in subshell, lost

In every case, when a built-in is run in a pipeline, its effects are:
Executed in a subprocess
Not visible to the parent shell
That’s expected and correct Bash behavior

=============================================================================
         -- 2 --
=============================================================================
bla | pwd
/mnt/...
bash: bla: command not found
Why does pwd print first?

🔹 Bash executes pipeline commands in parallel, but handles their output order based on:
What each command prints
Which stream is used (stdout or stderr)
🔹 Key details:
pwd prints to stdout
bash: bla: command not found is printed to stderr
🔹 stdout is usually line-buffered
stderr is unbuffered
pwd writes its output and gets flushed immediately (or early due to newline)
bash prints the command not found after trying to exec bla
===================================

🔍 pwd | exit in Bash:
Both pwd and exit are in a pipeline → each runs in its own child process

pwd prints the path.

exit runs in its own child, and exits only that subprocess, not the parent shell.
The shell stays open.
exit in a pipeline → executed in a child → does not close the shell
exit alone → executed in the parent → closes the shell


